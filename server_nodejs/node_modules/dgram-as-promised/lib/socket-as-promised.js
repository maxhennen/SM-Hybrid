"use strict";
/// <reference types="node" />
Object.defineProperty(exports, "__esModule", { value: true });
class SocketAsPromised {
    constructor(socket) {
        this.socket = socket;
    }
    bind(arg1, arg2) {
        return new Promise(resolve => {
            if (arg2 !== undefined) {
                this.socket.bind(arg1, arg2, () => {
                    const address = this.socket.address();
                    resolve(address);
                });
            }
            else {
                this.socket.bind(arg1, () => {
                    const address = this.socket.address();
                    resolve(address);
                });
            }
        });
    }
    addMembership(multicastAddress, multicastInterface) {
        return this.socket.addMembership(multicastAddress, multicastInterface);
    }
    close() {
        return new Promise((resolve, reject) => {
            try {
                this.socket.once("close", () => {
                    resolve();
                });
                this.socket.close();
            }
            catch (err) {
                reject(err);
            }
        });
    }
    send(arg1, arg2, arg3, arg4, arg5) {
        return new Promise((resolve, reject) => {
            try {
                if (arg4 !== undefined) {
                    this.socket.send(arg1, arg2, arg3, arg4, arg5, (err, sent) => {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(sent);
                        }
                    });
                }
                else {
                    this.socket.send(arg1, arg2, arg3, (err, sent) => {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(sent);
                        }
                    });
                }
            }
            catch (err) {
                reject(err);
            }
        });
    }
    address() {
        return this.socket.address();
    }
    setBroadcast(flag) {
        this.socket.setBroadcast(flag);
    }
    setTTL(ttl) {
        return this.socket.setTTL(ttl);
    }
    setMulticastTTL(ttl) {
        this.socket.setMulticastTTL(ttl);
    }
    setMulticastInterface(multicastInterface) {
        this.socket.setMulticastInterface(multicastInterface);
    }
    setMulticastLoopback(flag) {
        this.socket.setMulticastLoopback(flag);
    }
    dropMembership(multicastAddress, multicastInterface) {
        this.socket.dropMembership(multicastAddress, multicastInterface);
    }
    ref() {
        this.socket.ref();
        return this;
    }
    unref() {
        this.socket.unref();
        return this;
    }
    setRecvBufferSize(size) {
        this.socket.setRecvBufferSize(size);
    }
    setSendBufferSize(size) {
        this.socket.setSendBufferSize(size);
    }
    getRecvBufferSize() {
        return this.socket.getRecvBufferSize();
    }
    getSendBufferSize() {
        return this.getSendBufferSize();
    }
}
exports.SocketAsPromised = SocketAsPromised;
exports.default = SocketAsPromised;
//# sourceMappingURL=socket-as-promised.js.map